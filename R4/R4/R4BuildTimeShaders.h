
/* File autocompiled from shader files in Shaders/ directory. Changes to this file will be overriden on build! */


static NSString * const fshADSShaderSourceString = @"uniform lowp sampler2D texture_sampler; uniform lowp float texture_mask; varying lowp vec2 texcoord; varying lowp vec4 frag_color_primary; varying lowp vec4 frag_color_secondary; void main() {   /* Get pixel */   lowp vec4 texel = texture2D(texture_sampler, texcoord.st) + vec4(texture_mask, texture_mask, texture_mask, texture_mask);      /* Final color */   gl_FragColor = clamp(texel * frag_color_primary + frag_color_secondary, 0.0, 1.0); } ";

static NSString * const vshADSShaderSourceString = @"struct LightParameters {   vec4  position;   vec4  ambient_color;   vec4  diffuse_color;   vec4  specular_color; }; const int max_number_of_lights = 3; /* Uniforms */ uniform int number_of_lights; uniform LightParameters lights[max_number_of_lights]; uniform vec4  surface_ambient_color; uniform vec4  surface_diffuse_color; uniform vec4  surface_specular_color; uniform float surface_shininess; uniform mat4 model_view_matrix; uniform mat4 model_view_projection_matrix; uniform mat3 normal_matrix; /* Attributes */ attribute mediump vec3 in_position; attribute mediump vec3 in_normal; attribute mediump vec2 in_texcoord; /* Varyings */ varying lowp vec2 texcoord; varying lowp vec4 frag_color_primary; varying lowp vec4 frag_color_secondary; void main() {   /* Calculate texture coordinate(s) */   texcoord = in_texcoord;      /* Vertex position */   gl_Position = model_view_projection_matrix * vec4(in_position, 1.0);   /* Light */   mediump vec3 vertex_normal = normal_matrix * normalize(in_normal);   mediump vec4 vertex_position_eyespace = model_view_matrix * vec4(in_position, 1.0);      vec4 ambient = vec4(0.0);   vec4 diffuse = vec4(0.0);   vec4 specular = vec4(0.0);      for (int i = 0; i < number_of_lights; i++) {     /* Ambient */     ambient += surface_ambient_color * lights[i].ambient_color;          /* Diffuse */     mediump vec3 s = normalize(vec3(lights[i].position - vertex_position_eyespace));     mediump float sDotN = max( dot(s, vertex_normal), 0.0 );     diffuse += lights[i].diffuse_color * surface_diffuse_color * sDotN;          /* Specular */     if( sDotN > 0.0 ) {       vec3 v = normalize(-vertex_position_eyespace.xyz);       vec3 r = reflect(-s, vertex_normal);       specular += lights[i].specular_color * surface_specular_color * pow(max(dot(r, v), 0.0), surface_shininess);     }   }   frag_color_primary = ambient + diffuse;   frag_color_secondary = specular; } ";

static NSString * const fshParticleShaderSourceString = @"uniform lowp sampler2D texture_sampler; uniform lowp float texture_mask; varying lowp vec4   out_color; varying lowp vec2   out_texcoord; varying lowp float  out_colorBlendFactor; void main() {   lowp vec4 tex = texture2D(texture_sampler, out_texcoord);   lowp float alpha = tex.a;   lowp vec3 color = mix(vec3(tex), vec3(out_color), out_colorBlendFactor);   gl_FragColor = vec4(color, alpha * out_color.a); } ";

static NSString * const vshParticleShaderSourceString = @"uniform mat4 view_projection_matrix; attribute vec4 position_modelspace; attribute mediump vec2 texcoord; attribute vec4  instanceColor; attribute float instanceColorBlendFactor; attribute mat4  instanceModelMatrix; varying lowp vec4   out_color; varying lowp vec2   out_texcoord; varying lowp float  out_colorBlendFactor; void main() {   out_color = instanceColor;   out_texcoord = texcoord;   out_colorBlendFactor = instanceColorBlendFactor;   gl_Position = view_projection_matrix * instanceModelMatrix * position_modelspace; } ";

static NSString * const fshPlainShaderSourceString = @"uniform lowp sampler2D texture_sampler; uniform lowp float texture_mask; varying lowp vec2 out_texcoord; varying lowp vec4 out_color; void main() {   lowp vec4 texel = texture2D(texture_sampler, out_texcoord) + vec4(texture_mask, texture_mask, texture_mask, texture_mask);   gl_FragColor = texel * out_color; } ";

static NSString * const vshPlainShaderSourceString = @"/* Uniforms */ uniform vec4 surface_diffuse_color; uniform mat4 model_view_projection_matrix; /* Attributes */ attribute vec4 in_position; attribute vec2 in_texcoord; /* Varyings */ varying lowp vec2 out_texcoord; varying lowp vec4 out_color; void main() {   out_texcoord = in_texcoord;   out_color = surface_diffuse_color;      gl_Position = model_view_projection_matrix * in_position; } ";

#define BUILD_TIME_SHADERS_MAP @{\
  @"fshADSShader": fshADSShaderSourceString,\
  @"vshADSShader": vshADSShaderSourceString,\
  @"fshParticleShader": fshParticleShaderSourceString,\
  @"vshParticleShader": vshParticleShaderSourceString,\
  @"fshPlainShader": fshPlainShaderSourceString,\
  @"vshPlainShader": vshPlainShaderSourceString,\
  @"null": @"null" }
